%% LyX 2.0.1 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[english,noae]{scrartcl}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage{babel}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=false,bookmarksopen=false,
 breaklinks=true,pdfborder={0 0 0},backref=page,colorlinks=false]
 {hyperref}
\usepackage{breakurl}

\makeatletter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
<<echo=F>>=
  if(exists(".orig.enc")) options(encoding = .orig.enc)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
%\VignetteIndexEntry{Introduction to the proteinProfiles package}
%\VignettePackage{proteinProfiles}

\makeatother

\begin{document}

\title{Introduction to the\emph{}\\
\emph{proteinProfiles} package}


\author{Julian Gehring}

\maketitle

\section{Introduction}

Loading the package

<<load_package>>=
library(proteinProfiles)
@

Getting help

<<getting_help, eval=FALSE>>=
vignette(package="proteinProfiles")
vignette("proteinProfiles")
?profileDistance
@


\section{Importing data}

As a first step, we import the experimental data with the \texttt{readProteinData}
function. In this case, we import it from a tab-delimited text file
\emph{iPS\_proteomics\_slim\_cut.csv }which was derived from the original
\texttt{.xlsx}\texttt{\emph{ }}file by omitting unnecessary data for
our analysis at this point.

<<import_table>>=
file <- system.file("extdata", "ips_sample.csv", package="proteinProfiles")
x <- readProteinData(file)
@

The resulting object \emph{x} contains both the $\log_{2}$ ratios
of all replicates as well as the annotation associated with the proteins.

<<inspect_import>>=
names(x)
dim(x$data)
names(x$annotation)
dim(x$annotation)
@

The import step is generally only required once for a data set. We
can save the object \emph{x} in order to be able to skip this step
for future analyzes.


\section{Removing features with missing data}

Since computing the distances of profiles with several data points
missing may be unreliable, we can filter our data set and remove proteins
with the fraction of missing data points exceeding a user-defined
threshold $\Theta$. A threshold of e.g. $\Theta=0.3$ would remove
all features with more than 30\% of the data points missing. The diagnostic
plot shows the distribution of missing data points per feature and
also indicates the value for $\Theta$ chosen in the filtering.

This step is optional and subsequent analysis steps can be computed
with the output of \texttt{readProteinData} instead of the \texttt{readProteinData}
function.

<<filter, fig=TRUE>>=
y <- filterFeatures(x, 0.3, verbose=TRUE)
@


\section{Defining protein group of interest based on annotation}

Based on the annotation provided in the original data set a group
of proteins of interest can be obtained. The \texttt{grepAnnotation}
function matches substrings (regular expressions) against a column
of the annotation contained in \emph{x} and returns the row indices
of the proteins of interest in the data set.

By default, the pattern is matched against the protein names (column
\emph{``Protein.names''}). Here, we search for all protein names
starting with the string \emph{``28S''}.

<<grep_anno_protein_name>>=
index1 <- grepAnnotation(x, "^28S")
length(index1)
index1
@

We can also search other columns of the annotation. Here, we search
for all proteins associated with the term \emph{``Ribosome''} in
the annotation taken from the KEGG database.

<<grep_anno_ribosome_kegg>>=
index2 <- grepAnnotation(x, "Ribosome", "KEGG")
length(index2)
@


\section{Computing profile distances and assessing significance}

The \texttt{profileDistance} function constitutes the core part of
the analysis.
\begin{enumerate}
\item It computes the mean euclidean distance $d_{0}$ of the profiles for
the proteins of interest defined by \emph{index}. This distance is
shown as a red vertical line in the plot.
\item It performs step (1) for a number \emph{nSample} of randomly selected
groups with the same size as our group of interest. The distances
are shown as a cumulative distribution in the plot.
\item Based on the results of step (1) and (2), a p-value $p$ given by
the cumulative density at $d_{0}$ (which is equivalent to the area
under the probability density in the range $[-\infty,d_{0}]$) is
computed. It indicates the probability of observing a group of proteins
by chance with profiles having the same or a smaller distance as our
group of interest.
\end{enumerate}
<<profile_1, fig=TRUE>>=
z1 <- profileDistance(x, index1, nSample=1000)
z1$d0
z1$p.value
@in
<<profile_2, fig=TRUE>>=
z2 <- profileDistance(x, index2, nSample=1000)
@


\appendix

\section*{\newpage{}Session Info}

<<sessionInfo, results=tex, echo=FALSE>>=
toLatex(sessionInfo(), locale=FALSE)
@

\end{document}
